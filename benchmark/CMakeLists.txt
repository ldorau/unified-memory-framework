# Copyright (C) 2023 Intel Corporation
# Under the Apache License v2.0 with LLVM Exceptions. See LICENSE.TXT.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	message(WARNING "The benchmarks SHOULD NOT be run in the Debug build type!")
endif()

if (UMF_BUILD_BENCHMARKS_MT)
	include(FindThreads)
endif()

function(add_umf_benchmark)
    # NAME - a name of the benchmark
    # SRCS - source files
    # LIBS - libraries to be linked with
    set(oneValueArgs NAME)
    set(multiValueArgs SRCS LIBS)
    cmake_parse_arguments(ARG "" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    set(BENCH_NAME umf-${ARG_NAME})

    set(BENCH_LIBS umf ${ARG_LIBS})

    add_umf_executable(NAME ${BENCH_NAME} SRCS ${ARG_SRCS} LIBS ${BENCH_LIBS})

    target_include_directories(${BENCH_NAME} PRIVATE
        ${UMF_CMAKE_SOURCE_DIR}/include
        ${UMF_CMAKE_SOURCE_DIR}/src/utils)

    add_test(NAME ${BENCH_NAME}
        COMMAND ${BENCH_NAME}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

    # Benchmark passes if it prints "PASSED" in the output,
    # because ubench of scalable pool fails if the confidence interval
    # exceeds maximum permitted 2.5%.
    set_tests_properties(${BENCH_NAME} PROPERTIES
        LABELS "benchmark"
        PASS_REGULAR_EXPRESSION "PASSED")

    if(WINDOWS)
	# append PATH to DLLs
	set(DLL_PATH_LIST "PATH=path_list_append:../bin/$<CONFIG>")
	if(LIBHWLOC_DLL_DIRS)
		set(DLL_PATH_LIST "${DLL_PATH_LIST};PATH=path_list_append:${LIBHWLOC_DLL_DIRS}")
	endif()
	set_property(TEST ${BENCH_NAME} PROPERTY ENVIRONMENT_MODIFICATION "${DLL_PATH_LIST}")
    endif()

    if (UMF_BUILD_OS_MEMORY_PROVIDER)
	target_compile_definitions(${BENCH_NAME} PRIVATE UMF_BUILD_OS_MEMORY_PROVIDER=1)
    endif()
    if (UMF_BUILD_LIBUMF_POOL_DISJOINT)
	target_compile_definitions(${BENCH_NAME} PRIVATE UMF_BUILD_LIBUMF_POOL_DISJOINT=1)
    endif()
    if (UMF_BUILD_LIBUMF_POOL_JEMALLOC)
	target_compile_definitions(${BENCH_NAME} PRIVATE UMF_BUILD_LIBUMF_POOL_JEMALLOC=1)
    endif()
    if (UMF_BUILD_LIBUMF_POOL_SCALABLE)
	target_compile_definitions(${BENCH_NAME} PRIVATE UMF_BUILD_LIBUMF_POOL_SCALABLE=1)
    endif()
endfunction()

# optional libraries
if(UMF_BUILD_LIBUMF_POOL_DISJOINT)
	set(LIBS_OPTIONAL ${LIBS_OPTIONAL} disjoint_pool)
endif()
if(UMF_BUILD_LIBUMF_POOL_JEMALLOC)
	set(LIBS_OPTIONAL ${LIBS_OPTIONAL} jemalloc_pool)
endif()
if(UMF_BUILD_LIBUMF_POOL_SCALABLE)
	set(LIBS_OPTIONAL ${LIBS_OPTIONAL} scalable_pool)
endif()
if(LINUX)
	set(LIBS_OPTIONAL ${LIBS_OPTIONAL} m)
endif()

# BENCHMARKS

add_umf_benchmark(NAME ubench SRCS ubench.c LIBS ${LIBS_OPTIONAL})

if (UMF_BUILD_BENCHMARKS_MT)
	add_umf_benchmark(NAME multithread_bench SRCS multithread.cpp LIBS ${LIBS_OPTIONAL} pthread)
endif()
