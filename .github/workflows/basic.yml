# Builds project (with various compilers, CMake options, etc.) and runs tests
name: BasicBuilds

on: workflow_call

env:
  BUILD_DIR : "${{github.workspace}}/build/"
  INSTL_DIR : "${{github.workspace}}/build/install-dir"

permissions:
  contents: read

jobs:
  icx-build:
    # TODO: we could merge ICX build with gcc/clang (using our dockers) Issue: #259
    name: Intel C++ Compiler
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [{c: icx, cxx: icpx}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
    runs-on: ubuntu-22.04
    container:
      image: intel/oneapi:latest
      volumes:
        - ${{github.workspace}}:${{github.workspace}}
      options: "--privileged"

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install apt packages
      run: |
        apt-get update
        apt-get install -y libnuma-dev libjemalloc-dev libtbb-dev libhwloc-dev

    - name: Configure build
      run: >
        cmake
        -B build
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
        -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_LIBUMF_POOL_SCALABLE=ON
        -DUMF_BUILD_EXAMPLES=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF

    - name: Build UMF
      run: cmake --build build -j $(nproc)

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure --test-dir test

    - name: Test make install
      # Run only when the example is built
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_install.sh \
            ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}} ${{matrix.shared_library}}

    - name: Test make uninstall
      # Run only when the example is built
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_uninstall.sh ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}}

  ubuntu-build:
    name: Ubuntu
    strategy:
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-22.04']
        build_type: [Debug, Release]
        compiler: [{c: gcc, cxx: g++}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
        include:
          - os: 'ubuntu-20.04'
            build_type: Release
            compiler: {c: gcc-7, cxx: g++-7}
            shared_library: 'OFF'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: clang, cxx: clang++}
            shared_library: 'OFF'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'ON'
          - os: 'ubuntu-22.04'
            build_type: Debug
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'ON'
          # test os_provider='OFF' with shared_library='ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'OFF'
          # test os_provider='OFF' with shared_library='OFF'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'OFF'
            os_provider: 'OFF'
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install apt packages
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libhwloc-dev libnuma-dev libjemalloc-dev libtbb-dev

    - name: Install g++-7
      if: matrix.compiler.cxx == 'g++-7'
      run: sudo apt-get install -y ${{matrix.compiler.cxx}}

    # TODO enable building Level Zero provider in all workflows
    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
        -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_LIBUMF_POOL_SCALABLE=ON
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} -j $(nproc)

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest --output-on-failure

    - name: Test make install
      # Run only when the example is built
      # TODO: Modify installation test to accept output varying with build options
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_install.sh \
            ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}} ${{matrix.shared_library}}

    - name: Test make uninstall
      # Run only when the example is built
      # TODO: Modify installation test to accept output varying with build options
      if: matrix.os_provider == 'ON' && matrix.pool_tracking == 'ON'
      working-directory: ${{env.BUILD_DIR}}
      run: ${{github.workspace}}/test/test_make_uninstall.sh ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}}

  windows-build:
    name: Windows
    env:
      VCPKG_PATH: "${{github.workspace}}/build/vcpkg/packages/hwloc_x64-windows;${{github.workspace}}/build/vcpkg/packages/tbb_x64-windows"
    strategy:
      matrix:
        os: ['windows-2019', 'windows-2022']
        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
        include:
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: clang-cl, cxx: clang-cl}
            pool_tracking: 'ON'
            os_provider: 'ON'
            toolset: "-T ClangCL"
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            pool_tracking: 'ON'
            shared_library: 'ON'
            os_provider: 'ON'
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            pool_tracking: 'ON'
            shared_library: 'ON'
            os_provider: 'OFF'

    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Initialize vcpkg
      uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
      with:
        vcpkgGitCommitId: 3dd44b931481d7a8e9ba412621fa810232b66289
        vcpkgDirectory: ${{github.workspace}}/build/vcpkg
        vcpkgJsonGlob: '**/vcpkg.json'

    - name: Install dependencies
      run: vcpkg install
      shell: pwsh # Specifies PowerShell as the shell for running the script.

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        ${{matrix.toolset}}
        -DCMAKE_PREFIX_PATH="${{env.VCPKG_PATH}}"
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
        -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
        -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Run tests
      working-directory: ${{env.BUILD_DIR}}
      run: ctest -C ${{matrix.build_type}} --output-on-failure

  macos-build:
    name: MacOS
    strategy:
      matrix:
        os: ['macos-12', 'macos-13']
    runs-on: ${{matrix.os}}

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install Python requirements
      run: python3 -m pip install -r third_party/requirements.txt

    - name: Configure build
      run: >
        cmake
        -B ${{env.BUILD_DIR}}
        -DCMAKE_BUILD_TYPE=Release
        -DUMF_FORMAT_CODE_STYLE=OFF
        -DUMF_DEVELOPER_MODE=ON
        -DUMF_ENABLE_POOL_TRACKING=ON        
        -DUMF_BUILD_LEVEL_ZERO_PROVIDER=OFF

    - name: Build UMF
      run: cmake --build ${{env.BUILD_DIR}} -j $(sysctl -n hw.logicalcpu)
