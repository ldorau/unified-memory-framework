name: BasicBuilds

on: [push, pull_request, workflow_call]

env:
  BUILD_DIR : "${{github.workspace}}/build/"
  INSTL_DIR : "${{github.workspace}}/build/install-dir"

jobs:
  ubuntu-build:
    name: Build - Ubuntu
    strategy:
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-22.04']
        build_type: [Debug, Release]
        compiler: [{c: gcc, cxx: g++}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        os_provider: ['ON']
        include:
          - os: 'ubuntu-20.04'
            build_type: Release
            compiler: {c: gcc-7, cxx: g++-7}
            shared_library: 'OFF'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: clang, cxx: clang++}            
            shared_library: 'OFF'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
          # test os_provider='OFF' with shared_library='ON'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'ON'
            os_provider: 'OFF'
          # test os_provider='OFF' with shared_library='OFF'
          - os: 'ubuntu-22.04'
            build_type: Release
            compiler: {c: gcc, cxx: g++}
            shared_library: 'OFF'
            os_provider: 'OFF'
    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install apt packages
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libnuma-dev libjemalloc-dev libtbb-dev
      
      - name: Install g++-7
        if: matrix.compiler.cxx == 'g++-7'
        run: |
          sudo apt-get install -y ${{matrix.compiler.cxx}}

      - name: Configure build
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          -DCMAKE_INSTALL_PREFIX="${{env.INSTL_DIR}}"
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
          -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
          -DUMF_BUILD_OS_MEMORY_PROVIDER=${{matrix.os_provider}}
          -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_BUILD_LIBUMF_POOL_JEMALLOC=ON
          -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON
          -DUMF_BUILD_LIBUMF_POOL_SCALABLE=ON

      - name: Build UMF
        run: |
          cmake --build ${{env.BUILD_DIR}} -j $(nproc)
          
      - name: Run tests
        working-directory: ${{env.BUILD_DIR}}
        run: |
          ctest --output-on-failure

      - name: Test make install
        working-directory: ${{env.BUILD_DIR}}
        run: ${{github.workspace}}/test/test_make_install.sh \
              ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}} ${{matrix.shared_library}}

      - name: Test make uninstall
        working-directory: ${{env.BUILD_DIR}}
        run: ${{github.workspace}}/test/test_make_uninstall.sh ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}}

      - name: Test make install with benchmark
        working-directory: ${{env.BUILD_DIR}}
        run: ${{github.workspace}}/test/test_make_install_with_bench.sh \
              ${{github.workspace}} ${{env.BUILD_DIR}} ${{env.INSTL_DIR}} ${{matrix.build_type}}

  windows-build:
    name: Build - Windows
    strategy:
      matrix:
        os: ['windows-2019', 'windows-2022']
        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}]
        pool_tracking: ['ON', 'OFF']
        shared_library: ['OFF']
        include:
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: clang-cl, cxx: clang-cl}
            pool_tracking: 'ON'
            toolset: "-T ClangCL"
          - os: 'windows-2022'
            build_type: Release
            compiler: {c: cl, cxx: cl}
            pool_tracking: 'ON'
            shared_library: 'ON'
    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Configure build
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          ${{matrix.toolset}}
          -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
          -DUMF_BUILD_SHARED_LIBRARY=${{matrix.shared_library}}
          -DUMF_ENABLE_POOL_TRACKING=${{matrix.pool_tracking}}
          -DUMF_FORMAT_CODE_STYLE=OFF
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_BUILD_LIBUMF_POOL_DISJOINT=ON

      - name: Build UMF
        run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        run: ctest -C ${{matrix.build_type}} --output-on-failure

  macos-build:
    name: Build - MacOS
    strategy:
        matrix:
          os: ['macos-12', 'macos-13']
    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Install Python requirements
        run: python3 -m pip install -r third_party/requirements.txt

      - name: Configure build
        run: >
          cmake
          -B ${{env.BUILD_DIR}}
          -DCMAKE_BUILD_TYPE=Release
          -DUMF_FORMAT_CODE_STYLE=ON
          -DUMF_DEVELOPER_MODE=ON
          -DUMF_ENABLE_POOL_TRACKING=ON

      - name: Run code-style check     
        run: |
          cmake --build ${{env.BUILD_DIR}} --target clang-format-check

      - name: Build UMF
        run: |
          cmake --build ${{env.BUILD_DIR}} -j $(sysctl -n hw.logicalcpu)
